from datetime import datetime
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message,CallbackQuery
from database.orm_queries import get_worker_info
from keyboards.inline import profile_kb
from utils.bot_state import UserState
from keyboards.reply import main_menu
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from database.engine import db2
from utils.menu_enum import MainMenuEnum
command_router = Router()

async def show_profile(event: Message|CallbackQuery, state: FSMContext, session: AsyncSession,) -> None:
    async with db2.sessionmaker() as session:
        worker = await get_worker_info(session=session, telegram_id=event.from_user.id)
        text=("<b>üíº –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
                         f"‚î£ ID: ({event.from_user.id})\n"
                         f"‚î£ Username: @{event.from_user.username if event.from_user.username else "–æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç"}\n"
                         "‚îó –†–∞–Ω–≥: Low\n\n"
                         "„ÄΩÔ∏è <b>–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
                         f"‚î£ –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {worker.profit_balance} RUB\n"
                         f"‚îó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {worker.profit_count}\n\n"
                         "<b>üé≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n</b>"
                         f"‚î£ –¢–µ–≥ –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: <b>{f'#{worker.tag}' if worker.tag else '–æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç'}</b>\n"
                         f'‚î£ –ö–æ—à–µ–ª–µ–∫: <b>{worker.crypto_wallet if worker.crypto_wallet else "–æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç"}</b>\n'
                         "‚î£ –°—Ç–∞—Ç—É—Å: –í–æ—Ä–∫–µ—Ä\n"
                         f"‚îó –í –∫–æ–º–∞–Ω–¥–µ: {(datetime.now().date() - worker.join_date.date()).days} –¥–Ω–µ–π\n")
                        
    if isinstance(event, Message):
        await event.answer(text=text,reply_markup=profile_kb())
    else:
        await event.message.edit_text(text=text,reply_markup=profile_kb())
    await state.set_state(UserState.main_menu)

@command_router.message(CommandStart())
async def cmd_start(message: Message,state:FSMContext,session:AsyncSession) -> None:
    await message.answer_sticker("CAACAgIAAxkBAAEObXhoG31-0ExU21Op-Uq0Fge3hyvJNgACOXMAAlJGGEvAgeYEhpsRcDYE",
                                 reply_markup=main_menu())
    await show_profile(event=message, state=state, session=session)
